name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  SWIFT_VERSION: '6.0'

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Swift
      uses: swift-actions/setup-swift@v2
      with:
        swift-version: ${{ env.SWIFT_VERSION }}
    
    - name: Show Swift version
      run: swift --version
    
    - name: Build
      run: swift build -v
    
    - name: Run tests
      run: swift test -v --enable-code-coverage
    
    - name: Generate coverage report (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        xcrun llvm-cov export -format="lcov" \
          .build/debug/SwiftDataValidatorPackageTests.xctest/Contents/MacOS/SwiftDataValidatorPackageTests \
          -instr-profile .build/debug/codecov/default.profdata > coverage.lcov
    
    - name: Upload coverage to Codecov
      if: matrix.os == 'macos-latest'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.lcov
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    name: SwiftLint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: SwiftLint
      uses: norio-nomura/action-swiftlint@3.2.1
      with:
        args: --strict

  build-docs:
    name: Build Documentation
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Swift
      uses: swift-actions/setup-swift@v2
      with:
        swift-version: ${{ env.SWIFT_VERSION }}
    
    - name: Build documentation
      run: |
        swift package generate-documentation \
          --target SwiftDataValidator \
          --output-path ./docs \
          --hosting-base-path SwiftDataValidator

  release:
    name: Create Release
    needs: [test, lint]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        generate_release_notes: true
        draft: false
        prerelease: false